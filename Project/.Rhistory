meltdata <- melt(data,id="Date")
ggplot(meltdata,aes(x=Date,y=value,colour=variable,group=variable)) +
geom_line()
View(meltdata)
help(meltdata)
#Data
data <- read_csv(file.choose())
#Single Line Plot (Market Cap)
ggplot(data = data, aes(x = Date, y = MarketCap, group = 1))+
geom_line(color = "darkred", size = 0.5)
#Single Line Plot (Market Cap Log Scale)
slg2 <- ggplot(data = data, aes(x = Date, y = MarketCap, group = 1))+
geom_line(color = "darkred", size = 0.5)
slg2 + scale_y_continuous(trans = log10_trans())
View(data)
View(data)
install.packages(c("hrbrthemes", "plotly"))
install.packages(c("hrbrthemes", "plotly"))
install.packages(c("hrbrthemes", "plotly"))
install.packages(c("hrbrthemes", "plotly"))
install.packages(c("hrbrthemes", "plotly"))
Final_Tether <- read_csv("Final_Tether.csv")
library(readr)
library(ggplot2)
library(dplyr)
library(plotly)
library(hrbrthemes)
Final_Tether <- read_csv("Final_Tether.csv")
data$date <- as.Date(Final_Tether$Date)
View(data)
View(data)
p <- data %>%
ggplot( aes(x=date, y=value)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("bitcoin price ($)") +
theme_ipsum()
library(ggplot2)
p <- data %>%
ggplot( aes(x=date, y=value)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("bitcoin price ($)") +
theme_ipsum()
library(ggplot2)
library(readr)
library(dplyr)
library(plotly)
library(hrbrthemes)
Final_Tether <- read_csv("Final_Tether.csv")
# Libraries
library(ggplot2)
library(readr)
library(dplyr)
library(plotly)
library(hrbrthemes)
Final_Tether <- read_csv("Final_Tether.csv")
#Libraries
library(prophet) ##For forcasting
library(ggplot2)
library(lubridate)
#Libraries
library(xts)
library(readr)
library(lubridate)
Final_Tether <- read_csv("Time Series/Project/Final_Tether.csv")
Final_Tether <- Final_Tether[nrow(Final_Tether):1, ]
dates <- seq(as.Date("2017-01-19"), length = nrow(Final_Tether), by = "days")
#Creating time series (xts object) # par 7ème colonne par example
Final_Tethter_xts <- xts::xts(x = Final_Tether[,7], order.by = dates)
plot(Final_Tethter_xts)
dates <- seq(as.Date("2020-01-01"), length = nrow(Final_Tether), by = "days")
#Creating time series (xts object) # par 7ème colonne par example
Final_Tethter_xts <- xts::xts(x = Final_Tether[,7], order.by = dates)
plot(Final_Tethter_xts)
dates <- seq(as.Date("2017-01-19"), length = nrow(Final_Tether), by = "days")
#Creating time series (xts object) # par 7ème colonne par example
Final_Tethter_xts <- xts::xts(x = Final_Tether[,7], order.by = dates)
plot(Final_Tethter_xts)
# Load data
Short_Tether <- read_csv("Short_Tether.csv")
Short_Tether <- Short_Tether[nrow(Short_Tether):1, ]
dates <- seq(as.Date("2020-01-01"), length = nrow(Short_Tether), by = "days")
#Creating time series (xts object) # par 7ème colonne par example
Short_Tethter_xts <- xts::xts(x = Short_Tether[,7], order.by = dates)
plot(Short_Tethter_xts)
install.packages("e1071")
library(readr)
X1_Bitcoin <- read_csv('Coins/1_Bitcoin.csv')
X2_Ethereum <- read_csv('Coins/2_Ethereum.csv')
X3_XRP <- read_csv('Coins/3_XRP.csv')
X4_Bitcoin_Cash <- read_csv('Coins/4_Bitcoin_Cash.csv')
X5_Tether <- read_csv('Coins/5_Tether.csv')
X6_Bitcoin_SV <- read_csv('Coins/6_Bitcoin_SV.csv')
X7_Litecoin <- read_csv('Coins/7_Litecoin.csv')
X8_EOS <- read_csv('Coins/8_EOS.csv')
X9_Binance_Coin <- read_csv('Coins/9_Binance_Coin.csv')
X10_Tezos <- read_csv('Coins/10_Tezos.csv')
X11_Chainlink <- read_csv('Coins/11_Chainlink.csv')
X12_Cardano <- read_csv('Coins/12_Cardano.csv')
X13_Stellar <- read_csv('Coins/13_Stellar.csv')
X15_TRON <- read_csv('Coins/15_TRON.csv')
X15_UNUS_SED_LEO <- read_csv('Coins/15_UNUS_SED_LEO.csv')
X14_Monero <- read_csv('Coins/14_Monero.csv')
X17_Huobi_Token <- read_csv('Coins/17_Huobi_Token.csv')
X18_Ethereum_Classic <- read_csv('Coins/18_Ethereum_Classic.csv')
X19_Dash <- read_csv('Coins/19_Dash.csv')
X20_Crypto.com_Coin <- read_csv('Coins/20_Crypto.com_Coin.csv')
X21_Neo <- read_csv('Coins/21_Neo.csv')
X22_HedgeTrade <- read_csv('Coins/22_HedgeTrade.csv')
X23_Cosmos <- read_csv('Coins/23_Cosmos.csv')
X24_IOTA <- read_csv('Coins/24_IOTA.csv')
X25_Maker <- read_csv('Coins/25_Maker.csv')
X26_USD_Coin <- read_csv('Coins/26_USD_Coin.csv')
X27_NEM <- read_csv('Coins/27_NEM.csv')
X28_Zcash <- read_csv('Coins/28_Zcash.csv')
X29_Ontology <- read_csv('Coins/29_Ontology.csv')
X30_Basic_Attention_Token <- read_csv('Coins/30_Basic_Attention_Token.csv')
X31_Dogecoin <- read_csv('Coins/31_Dogecoin.csv')
X32_OKB <- read_csv('Coins/32_OKB.csv')
X33_VeChain <- read_csv('Coins/33_VeChain.csv')
X34_FTX_Token <- read_csv('Coins/34_FTX_Token.csv')
X35_Paxos_Standard <- read_csv('Coins/35_Paxos_Standard.csv')
X36_Qtum <- read_csv('Coins/36_Qtum.csv')
X37_Algorand <- read_csv('Coins/37_Algorand.csv')
X38_Decred <- read_csv('Coins/38_Decred.csv')
X39_Bitcoin_Gold <- read_csv('Coins/39_Bitcoin_Gold.csv')
X40_ICON <- read_csv('Coins/40_ICON.csv')
X41_Hedera_Hashgraph <- read_csv('Coins/41_Hedera_Hashgraph.csv')
vol_var <- c(sqrt(var(X1_Bitcoin$VolumeTraded[1:919])), sqrt(var(X2_Ethereum$VolumeTraded[1:919])), sqrt(var(X3_XRP$VolumeTraded[1:919])), sqrt(var(X4_Bitcoin_Cash$VolumeTraded[1:919])), sqrt(var(X7_Litecoin$VolumeTraded[1:919])), sqrt(var(X8_EOS$VolumeTraded[1:919])), sqrt(var(X9_Binance_Coin$VolumeTraded[1:919])), sqrt(var(X15_TRON$VolumeTraded[1:919])))
mc_var <- c(sqrt(var(X1_Bitcoin$MarketCap[1:919])), sqrt(var(X2_Ethereum$MarketCap[1:919])), sqrt(var(X3_XRP$MarketCap[1:919])), sqrt(var(X4_Bitcoin_Cash$MarketCap[1:919])), sqrt(var(X7_Litecoin$MarketCap[1:919])), sqrt(var(X8_EOS$MarketCap[1:919])), sqrt(var(X9_Binance_Coin$MarketCap[1:919])), sqrt(var(X15_TRON$MarketCap[1:919])))
vol_min <- c(min(X1_Bitcoin$VolumeTraded[1:919]), min(X2_Ethereum$VolumeTraded[1:919]), min(X3_XRP$VolumeTraded[1:919]), min(X4_Bitcoin_Cash$VolumeTraded[1:919]), min(X7_Litecoin$VolumeTraded[1:919]), min(X8_EOS$VolumeTraded[1:919]), min(X9_Binance_Coin$VolumeTraded[1:919]), min(X15_TRON$VolumeTraded[1:919]))
mc_min <- c(min(X1_Bitcoin$MarketCap[1:919]), min(X2_Ethereum$MarketCap[1:919]), min(X3_XRP$MarketCap[1:919]), min(X4_Bitcoin_Cash$MarketCap[1:919]), min(X7_Litecoin$MarketCap[1:919]), min(X8_EOS$MarketCap[1:919]), min(X9_Binance_Coin$MarketCap[1:919]), min(X15_TRON$MarketCap[1:919]))
vol_max <- c(max(X1_Bitcoin$VolumeTraded[1:919]), max(X2_Ethereum$VolumeTraded[1:919]), max(X3_XRP$VolumeTraded[1:919]), max(X4_Bitcoin_Cash$VolumeTraded[1:919]), max(X7_Litecoin$VolumeTraded[1:919]), max(X8_EOS$VolumeTraded[1:919]), max(X9_Binance_Coin$VolumeTraded[1:919]), max(X15_TRON$VolumeTraded[1:919]))
mc_max <- c(max(X1_Bitcoin$MarketCap[1:919]), max(X2_Ethereum$MarketCap[1:919]), max(X3_XRP$MarketCap[1:919]), max(X4_Bitcoin_Cash$MarketCap[1:919]), max(X7_Litecoin$MarketCap[1:919]), max(X8_EOS$MarketCap[1:919]), max(X9_Binance_Coin$MarketCap[1:919]), max(X15_TRON$MarketCap[1:919]))
volt <- cbind(X1_Bitcoin$VolumeTraded[1:919], X2_Ethereum$VolumeTraded[1:919], X3_XRP$VolumeTraded[1:919], X4_Bitcoin_Cash$VolumeTraded[1:919], X7_Litecoin$VolumeTraded[1:919], X8_EOS$VolumeTraded[1:919], X9_Binance_Coin$VolumeTraded[1:919], X15_TRON$VolumeTraded[1:919])
marketc <- cbind(X1_Bitcoin$MarketCap[1:919], X2_Ethereum$MarketCap[1:919], X3_XRP$MarketCap[1:919], X4_Bitcoin_Cash$MarketCap[1:919], X7_Litecoin$MarketCap[1:919], X8_EOS$MarketCap[1:919], X9_Binance_Coin$MarketCap[1:919], X15_TRON$MarketCap[1:919])
volt <- cbind(X1_Bitcoin$VolumeTraded[1:919], X2_Ethereum$VolumeTraded[1:919], X3_XRP$VolumeTraded[1:919], X4_Bitcoin_Cash$VolumeTraded[1:919], X7_Litecoin$VolumeTraded[1:919], X8_EOS$VolumeTraded[1:919], X9_Binance_Coin$VolumeTraded[1:919], X15_TRON$VolumeTraded[1:919])
marketc <- cbind(X1_Bitcoin$MarketCap[1:919], X2_Ethereum$MarketCap[1:919], X3_XRP$MarketCap[1:919], X4_Bitcoin_Cash$MarketCap[1:919], X7_Litecoin$MarketCap[1:919], X8_EOS$MarketCap[1:919], X9_Binance_Coin$MarketCap[1:919], X15_TRON$MarketCap[1:919])
predictor_matrix <- cbind(volt, marketc)
linear_model <- lm(X5_Tether$MarketCap[1:919] ~ predictor_matrix)
#################
vol_mean <- c(mean(X1_Bitcoin$VolumeTraded[1:30]), mean(X2_Ethereum$VolumeTraded[1:30]), mean(X3_XRP$VolumeTraded[1:30]), mean(X4_Bitcoin_Cash$VolumeTraded[1:30]), mean(X7_Litecoin$VolumeTraded[1:30]), mean(X8_EOS$VolumeTraded[1:30]), mean(X9_Binance_Coin$VolumeTraded[1:30]), mean(X15_TRON$VolumeTraded[1:30]))
mc_mean <- c(mean(X1_Bitcoin$MarketCap[1:30]), mean(X2_Ethereum$MarketCap[1:30]), mean(X3_XRP$MarketCap[1:30]), mean(X4_Bitcoin_Cash$MarketCap[1:30]), mean(X7_Litecoin$MarketCap[1:30]), mean(X8_EOS$MarketCap[1:30]), mean(X9_Binance_Coin$MarketCap[1:30]), mean(X15_TRON$MarketCap[1:30]))
vol_var <- c(sqrt(var(X1_Bitcoin$VolumeTraded[1:30])), sqrt(var(X2_Ethereum$VolumeTraded[1:30])), sqrt(var(X3_XRP$VolumeTraded[1:30])), sqrt(var(X4_Bitcoin_Cash$VolumeTraded[1:30])), sqrt(var(X7_Litecoin$VolumeTraded[1:30])), sqrt(var(X8_EOS$VolumeTraded[1:30])), sqrt(var(X9_Binance_Coin$VolumeTraded[1:30])), sqrt(var(X15_TRON$VolumeTraded[1:30])))
mc_var <- c(sqrt(var(X1_Bitcoin$MarketCap[1:30])), sqrt(var(X2_Ethereum$MarketCap[1:30])), sqrt(var(X3_XRP$MarketCap[1:30])), sqrt(var(X4_Bitcoin_Cash$MarketCap[1:30])), sqrt(var(X7_Litecoin$MarketCap[1:30])), sqrt(var(X8_EOS$MarketCap[1:30])), sqrt(var(X9_Binance_Coin$MarketCap[1:30])), sqrt(var(X15_TRON$MarketCap[1:30])))
#################
colnames(predictor_matrix) <- c("btc_vt", "eth_vt", "xrp_vt", "bcc_vt", "ltc_vt", "eos_vt","bnb_vt", "tron_vt", "btc_mc", "eth_mc", "xrp_mc", "bcc_mc", "ltc_mc", "eos_mc","bnb_mc", "tron_mc")
svmodel <- svm(X1_Bitcoin$MarketCap[1:869] ~ day,data=crypto, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_1BitcoinMC <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of TRON
svmodel <- svm(X15_TRON$MarketCap[1:869] ~ day,data=crypto, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_15TRONMC <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 4BitcoinCash
svmodel <- svm(X4_Bitcoin_Cash ~ day,data=crypto, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_4BitcoinCashMC <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 7Litecoin
svmodel <- svm(X7_Litecoin$MarketCap[1:869] ~ day,data=crypto, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_7LitecoinMC <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 8EOS
svmodel <- svm(X8_EOS$MarketCap[1:869] ~ day,data=crypto, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_8EOSMC <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 9BinanceCoin
svmodel <- svm(X9_Binance_Coin$MarketCap[1:869] ~ day,data=crypto, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_9BinanceCoinMC <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 11Chainlink
svmodel <- svm(X11_Chainlink$MarketCap[1:869] ~ day,data=crypto, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_11ChainlinkMC <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 16Monero
svmodel <- svm(X16_Monero$MarketCap[1:869] ~ day,data=crypto, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_16Monero <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 16Monero
svmodel <- svm(X1_Bitcoin$VolumeTraded[1:869] ~ day,data=crypto, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_1BitcoinVT <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of TRON
svmodel <- svm(X15_TRON$VolumeTraded[1:869] ~ day,data=crypto, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_15TRONVT <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 2Ethereum
svmodel <- svm(X2_Ethereum$VolumeTraded[1:869] ~ day,data=crypto, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_2EthereumVT <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 60 days of 2Ethereum
range_60days <- 870:929
predict60_2EthereumVT <- predict(svmodel, newdata=data.frame(day=range_60days))
#Forecasting for next 30 days of 3XRP
svmodel <- svm(X3_XRP$VolumeTraded[1:869] ~ day,data=crypto, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_3XRPVT <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 4BitcoinCash
svmodel <- svm(X4_Bitcoin_Cash ~ day,data=crypto, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_4BitcoinCashVT <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 7Litecoin
svmodel <- svm(X7_Litecoin$VolumeTraded[1:869] ~ day,data=crypto, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_7LitecoinVT <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 8EOS
svmodel <- svm(X8_EOS$VolumeTraded[1:869] ~ day,data=crypto, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_8EOSVT <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 9BinanceCoin
svmodel <- svm(X9_Binance_Coin$VolumeTraded[1:869] ~ day,data=crypto, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_9BinanceCoinVT <- predict(svmodel, newdata=data.frame(day=range_30days))
library('e1071')
svmodel <- svm(X1_Bitcoin$MarketCap[1:869] ~ day,data=crypto, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_1BitcoinMC <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of TRON
svmodel <- svm(X15_TRON$MarketCap[1:869] ~ day,data=crypto, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_15TRONMC <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 4BitcoinCash
svmodel <- svm(X4_Bitcoin_Cash ~ day,data=crypto, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_4BitcoinCashMC <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 7Litecoin
svmodel <- svm(X7_Litecoin$MarketCap[1:869] ~ day,data=crypto, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_7LitecoinMC <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 8EOS
svmodel <- svm(X8_EOS$MarketCap[1:869] ~ day,data=crypto, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_8EOSMC <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 9BinanceCoin
svmodel <- svm(X9_Binance_Coin$MarketCap[1:869] ~ day,data=crypto, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_9BinanceCoinMC <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 11Chainlink
svmodel <- svm(X11_Chainlink$MarketCap[1:869] ~ day,data=crypto, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_11ChainlinkMC <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 16Monero
svmodel <- svm(X16_Monero$MarketCap[1:869] ~ day,data=crypto, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_16Monero <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 16Monero
svmodel <- svm(X1_Bitcoin$VolumeTraded[1:869] ~ day,data=crypto, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_1BitcoinVT <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of TRON
svmodel <- svm(X15_TRON$VolumeTraded[1:869] ~ day,data=crypto, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_15TRONVT <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 2Ethereum
svmodel <- svm(X2_Ethereum$VolumeTraded[1:869] ~ day,data=crypto, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_2EthereumVT <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 60 days of 2Ethereum
range_60days <- 870:929
predict60_2EthereumVT <- predict(svmodel, newdata=data.frame(day=range_60days))
#Forecasting for next 30 days of 3XRP
svmodel <- svm(X3_XRP$VolumeTraded[1:869] ~ day,data=crypto, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_3XRPVT <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 4BitcoinCash
svmodel <- svm(X4_Bitcoin_Cash ~ day,data=crypto, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_4BitcoinCashVT <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 7Litecoin
svmodel <- svm(X7_Litecoin$VolumeTraded[1:869] ~ day,data=crypto, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_7LitecoinVT <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 8EOS
svmodel <- svm(X8_EOS$VolumeTraded[1:869] ~ day,data=crypto, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_8EOSVT <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 9BinanceCoin
svmodel <- svm(X9_Binance_Coin$VolumeTraded[1:869] ~ day,data=crypto, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_9BinanceCoinVT <- predict(svmodel, newdata=data.frame(day=range_30days))
svmodel <- svm(X1_Bitcoin$MarketCap[1:869] ~ day,data=predictor_matrix, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_1BitcoinMC <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of TRON
svmodel <- svm(X15_TRON$MarketCap[1:869] ~ day,data=predictor_matrix, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_15TRONMC <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 4BitcoinCash
svmodel <- svm(X4_Bitcoin_Cash ~ day,data=predictor_matrix, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_4BitcoinCashMC <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 7Litecoin
svmodel <- svm(X7_Litecoin$MarketCap[1:869] ~ day,data=predictor_matrix, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_7LitecoinMC <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 8EOS
svmodel <- svm(X8_EOS$MarketCap[1:869] ~ day,data=predictor_matrix, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_8EOSMC <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 9BinanceCoin
svmodel <- svm(X9_Binance_Coin$MarketCap[1:869] ~ day,data=predictor_matrix, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_9BinanceCoinMC <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 11Chainlink
svmodel <- svm(X11_Chainlink$MarketCap[1:869] ~ day,data=predictor_matrix, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_11ChainlinkMC <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 16Monero
svmodel <- svm(X16_Monero$MarketCap[1:869] ~ day,data=predictor_matrix, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_16Monero <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 16Monero
svmodel <- svm(X1_Bitcoin$VolumeTraded[1:869] ~ day,data=predictor_matrix, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_1BitcoinVT <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of TRON
svmodel <- svm(X15_TRON$VolumeTraded[1:869] ~ day,data=predictor_matrix, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_15TRONVT <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 2Ethereum
svmodel <- svm(X2_Ethereum$VolumeTraded[1:869] ~ day,data=predictor_matrix, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_2EthereumVT <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 60 days of 2Ethereum
range_60days <- 870:929
predict60_2EthereumVT <- predict(svmodel, newdata=data.frame(day=range_60days))
#Forecasting for next 30 days of 3XRP
svmodel <- svm(X3_XRP$VolumeTraded[1:869] ~ day,data=predictor_matrix, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_3XRPVT <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 4BitcoinCash
svmodel <- svm(X4_Bitcoin_Cash ~ day,data=predictor_matrix, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_4BitcoinCashVT <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 7Litecoin
svmodel <- svm(X7_Litecoin$VolumeTraded[1:869] ~ day,data=predictor_matrix, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_7LitecoinVT <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 8EOS
svmodel <- svm(X8_EOS$VolumeTraded[1:869] ~ day,data=predictor_matrix, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_8EOSVT <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 9BinanceCoin
svmodel <- svm(X9_Binance_Coin$VolumeTraded[1:869] ~ day,data=predictor_matrix, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_9BinanceCoinVT <- predict(svmodel, newdata=data.frame(day=range_30days))
library('e1071')
crypto <- read_csv("~/Desktop/ECON422_R_Project/crypto.csv")
crypto$day <- 1:869
#Forecasting for next 30 days of 1Bitcoin
svmodel <- svm(X1_Bitcoin$MarketCap[1:869] ~ day,data=predictor_matrix, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_1BitcoinMC <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of TRON
svmodel <- svm(X15_TRON$MarketCap[1:869] ~ day,data=predictor_matrix, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_15TRONMC <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 4BitcoinCash
svmodel <- svm(X4_Bitcoin_Cash ~ day,data=predictor_matrix, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_4BitcoinCashMC <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 7Litecoin
svmodel <- svm(X7_Litecoin$MarketCap[1:869] ~ day,data=predictor_matrix, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_7LitecoinMC <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 8EOS
svmodel <- svm(X8_EOS$MarketCap[1:869] ~ day,data=predictor_matrix, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_8EOSMC <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 9BinanceCoin
svmodel <- svm(X9_Binance_Coin$MarketCap[1:869] ~ day,data=predictor_matrix, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_9BinanceCoinMC <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of TRON
svmodel <- svm(X15_TRON$VolumeTraded[1:869] ~ day,data=predictor_matrix, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_15TRONVT <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 2Ethereum
svmodel <- svm(X2_Ethereum$VolumeTraded[1:869] ~ day,data=predictor_matrix, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_2EthereumVT <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 60 days of 2Ethereum
range_60days <- 870:929
predict60_2EthereumVT <- predict(svmodel, newdata=data.frame(day=range_60days))
#Forecasting for next 30 days of 3XRP
svmodel <- svm(X3_XRP$VolumeTraded[1:869] ~ day,data=predictor_matrix, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_3XRPVT <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 4BitcoinCash
svmodel <- svm(X4_Bitcoin_Cash ~ day,data=predictor_matrix, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_4BitcoinCashVT <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 7Litecoin
svmodel <- svm(X7_Litecoin$VolumeTraded[1:869] ~ day,data=predictor_matrix, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_7LitecoinVT <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 8EOS
svmodel <- svm(X8_EOS$VolumeTraded[1:869] ~ day,data=predictor_matrix, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_8EOSVT <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 9BinanceCoin
svmodel <- svm(X9_Binance_Coin$VolumeTraded[1:869] ~ day,data=predictor_matrix, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_9BinanceCoinVT <- predict(svmodel, newdata=data.frame(day=range_30days))
svmodel <- svm(X1_Bitcoin$MarketCap[1:869] ~ day,data=day, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_1BitcoinMC <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of TRON
svmodel <- svm(X15_TRON$MarketCap[1:869] ~ day,data=day, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_15TRONMC <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 4BitcoinCash
svmodel <- svm(X4_Bitcoin_Cash ~ day,data=day, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_4BitcoinCashMC <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 7Litecoin
svmodel <- svm(X7_Litecoin$MarketCap[1:869] ~ day,data=day, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_7LitecoinMC <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 8EOS
svmodel <- svm(X8_EOS$MarketCap[1:869] ~ day,data=day, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_8EOSMC <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 9BinanceCoin
svmodel <- svm(X9_Binance_Coin$MarketCap[1:869] ~ day,data=day, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_9BinanceCoinMC <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of TRON
svmodel <- svm(X15_TRON$VolumeTraded[1:869] ~ day,data=day, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_15TRONVT <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 2Ethereum
svmodel <- svm(X2_Ethereum$VolumeTraded[1:869] ~ day,data=day, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_2EthereumVT <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 60 days of 2Ethereum
range_60days <- 870:929
predict60_2EthereumVT <- predict(svmodel, newdata=data.frame(day=range_60days))
#Forecasting for next 30 days of 3XRP
svmodel <- svm(X3_XRP$VolumeTraded[1:869] ~ day,data=day, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_3XRPVT <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 4BitcoinCash
svmodel <- svm(X4_Bitcoin_Cash ~ day,data=day, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_4BitcoinCashVT <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 7Litecoin
svmodel <- svm(X7_Litecoin$VolumeTraded[1:869] ~ day,data=day, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_7LitecoinVT <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 8EOS
svmodel <- svm(X8_EOS$VolumeTraded[1:869] ~ day,data=day, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_8EOSVT <- predict(svmodel, newdata=data.frame(day=range_30days))
#Forecasting for next 30 days of 9BinanceCoin
svmodel <- svm(X9_Binance_Coin$VolumeTraded[1:869] ~ day,data=day, type="eps-regression",kernel="radial",cost=10000, gamma=10)
range_30days <- 870:899
predict30_9BinanceCoinVT <- predict(svmodel, newdata=data.frame(day=range_30days))
library(readr)
library(glmnet)
X1_Bitcoin <- read_csv('Coins/1_Bitcoin.csv')
X2_Ethereum <- read_csv('Coins/2_Ethereum.csv')
X3_XRP <- read_csv('Coins/3_XRP.csv')
X4_Bitcoin_Cash <- read_csv('Coins/4_Bitcoin_Cash.csv')
X5_Tether <- read_csv('Coins/5_Tether.csv')
X6_Bitcoin_SV <- read_csv('Coins/6_Bitcoin_SV.csv')
X7_Litecoin <- read_csv('Coins/7_Litecoin.csv')
X8_EOS <- read_csv('Coins/8_EOS.csv')
X9_Binance_Coin <- read_csv('Coins/9_Binance_Coin.csv')
X10_Tezos <- read_csv('Coins/10_Tezos.csv')
X11_Chainlink <- read_csv('Coins/11_Chainlink.csv')
X12_Cardano <- read_csv('Coins/12_Cardano.csv')
X13_Stellar <- read_csv('Coins/13_Stellar.csv')
X15_TRON <- read_csv('Coins/15_TRON.csv')
X15_UNUS_SED_LEO <- read_csv('Coins/15_UNUS_SED_LEO.csv')
X14_Monero <- read_csv('Coins/14_Monero.csv')
X17_Huobi_Token <- read_csv('Coins/17_Huobi_Token.csv')
X18_Ethereum_Classic <- read_csv('Coins/18_Ethereum_Classic.csv')
X19_Dash <- read_csv('Coins/19_Dash.csv')
X20_Crypto.com_Coin <- read_csv('Coins/20_Crypto.com_Coin.csv')
X21_Neo <- read_csv('Coins/21_Neo.csv')
X22_HedgeTrade <- read_csv('Coins/22_HedgeTrade.csv')
X23_Cosmos <- read_csv('Coins/23_Cosmos.csv')
X24_IOTA <- read_csv('Coins/24_IOTA.csv')
X25_Maker <- read_csv('Coins/25_Maker.csv')
X26_USD_Coin <- read_csv('Coins/26_USD_Coin.csv')
X27_NEM <- read_csv('Coins/27_NEM.csv')
X28_Zcash <- read_csv('Coins/28_Zcash.csv')
X29_Ontology <- read_csv('Coins/29_Ontology.csv')
X30_Basic_Attention_Token <- read_csv('Coins/30_Basic_Attention_Token.csv')
X31_Dogecoin <- read_csv('Coins/31_Dogecoin.csv')
X32_OKB <- read_csv('Coins/32_OKB.csv')
X33_VeChain <- read_csv('Coins/33_VeChain.csv')
X34_FTX_Token <- read_csv('Coins/34_FTX_Token.csv')
X35_Paxos_Standard <- read_csv('Coins/35_Paxos_Standard.csv')
X36_Qtum <- read_csv('Coins/36_Qtum.csv')
X37_Algorand <- read_csv('Coins/37_Algorand.csv')
X38_Decred <- read_csv('Coins/38_Decred.csv')
X39_Bitcoin_Gold <- read_csv('Coins/39_Bitcoin_Gold.csv')
X40_ICON <- read_csv('Coins/40_ICON.csv')
X41_Hedera_Hashgraph <- read_csv('Coins/41_Hedera_Hashgraph.csv')
volt <- cbind(X1_Bitcoin$VolumeTraded[1:860], X2_Ethereum$VolumeTraded[1:860], X3_XRP$VolumeTraded[1:860], X4_Bitcoin_Cash$VolumeTraded[1:860], X7_Litecoin$VolumeTraded[1:860], X8_EOS$VolumeTraded[1:860], X9_Binance_Coin$VolumeTraded[1:860], X15_TRON$VolumeTraded[1:860])
marketc <- cbind(X1_Bitcoin$MarketCap[1:860], X2_Ethereum$MarketCap[1:860], X3_XRP$MarketCap[1:860], X4_Bitcoin_Cash$MarketCap[1:860], X7_Litecoin$MarketCap[1:860], X8_EOS$MarketCap[1:860], X9_Binance_Coin$MarketCap[1:860], X15_TRON$MarketCap[1:860])
predictor_matrix <- cbind(volt, marketc)
# FIT LASSO MODEL
set.seed(10000)
lasso_model <- cv.glmnet(as.matrix(predictor_matrix), as.matrix(X5_Tether$MarketCap[1:860]), lambda = 10^seq(9, 6, length = 80), alpha = 1, )
lasso_model$lambda.1se
plot(lasso_model)
best_lambda <- lasso_model$lambda.1se
lasso_coef <- lasso_model$glmnet.fit$beta[, lasso_model$glmnet.fit$lambda == best_lambda]
